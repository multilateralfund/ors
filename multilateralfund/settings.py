"""
Django settings for multilateralfund project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import environ
import socket
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_DIR = BASE_DIR / "core"

env = environ.Env()

if os.path.exists(str(BASE_DIR / ".env")):
    env.read_env(str(BASE_DIR / ".env"))

BACKEND_HOST = env.list("BACKEND_HOST", default=["localhost"])
FRONTEND_HOST = env.list("FRONTEND_HOST", default=["http://localhost:3000"])

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY", default="")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", default=False)

ALLOWED_HOSTS = [
    # Allow direct access from the docker network to the backend API
    "app",
    # Allow access from the outside
    *[host.rsplit(":", 1)[0].split("/")[-1] for host in BACKEND_HOST],
]

# CORS allowed origins
CORS_ALLOWED_ORIGINS = [_host.rsplit(",", 1)[0] for _host in FRONTEND_HOST]
CORS_ORIGIN_WHITELIST = [_host.rsplit(",", 1)[0] for _host in FRONTEND_HOST]
CORS_ALLOW_CREDENTIALS = True

# CSRF allowed origins
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS

# SECURITY
HAS_HTTPS = env.get_value("HAS_HTTPS", default=False, cast=bool)
SECURE_SSL_REDIRECT = HAS_HTTPS
CSRF_COOKIE_SECURE = HAS_HTTPS
SESSION_COOKIE_SECURE = HAS_HTTPS
# https://docs.djangoproject.com/en/4.1/ref/settings/#secure-proxy-ssl-header
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "dj_rest_auth",
    "django_filters",
    "corsheaders",
    "colorfield",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "admin_auto_filters",
    "drf_yasg",
    "constance",
    "constance.backends.database",
    "explorer",
    "mptt",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "multilateralfund.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(ROOT_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "multilateralfund.wsgi.application"

# custom user
AUTH_USER_MODEL = "core.User"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
POSTGRES_HOST = env.str("POSTGRES_HOST", default="localhost")
POSTGRES_PORT = env.int("POSTGRES_PORT", default=5432)
POSTGRES_DB = env.str("POSTGRES_DB", default="multilateralfund")
POSTGRES_USER = env.str("POSTGRES_USER", default="multilateralfund")
POSTGRES_PASSWORD = env.str("POSTGRES_PASSWORD", default="secret")

READONLY_USER = env.str("POSTGRES_USER", default="readonly_explorer")
READONLY_PASSWORD = env.str("POSTGRES_PASSWORD", default="secretreadonly")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
    },
    "readonly": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
        "USER": READONLY_USER,
        "PASSWORD": READONLY_PASSWORD,
    },
}

# Django explorer settings
EXPLORER_CONNECTIONS = {"Default": "readonly"}
EXPLORER_DEFAULT_CONNECTION = "readonly"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

FS_DIR = BASE_DIR / ".fs"

STATIC_URL = "static/"
STATIC_ROOT = FS_DIR / "static"
IMPORT_DATA_DIR = FS_DIR / "import_files"
PROTECTED_MEDIA_ROOT = FS_DIR / "protected_media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MIN_VALID_YEAR = 1985

# CONSTANCE
# https://django-constance.readthedocs.io/en/latest/

CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"

CONSTANCE_CONFIG = {
    "CP_NR_REPORTS": (9, "Number of reports to display in the country programme page"),
}

# Logging
LOG_LEVEL = env.get_value("DJANGO_LOG_LEVEL", default="DEBUG" if DEBUG else "INFO")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} [{process}] {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "core": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

SITE_ID = 1

# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
EMAIL_BACKEND = env.get_value(
    "DJANGO_EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)

EMAIL_HOST = env.str("EMAIL_HOST", default=None)
EMAIL_PORT = env.int("EMAIL_PORT", default=None)
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", default=None)
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", default=None)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)

DJANGO_DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", default="")
# Even if no default is set default to noreply@
DEFAULT_FROM_EMAIL = DJANGO_DEFAULT_FROM_EMAIL or ("noreply@" + socket.gethostname())

# DRF Integration

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
}

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False,
    "JWT_AUTH_COOKIE": "orsauth",
    "JWT_AUTH_REFRESH_COOKIE": "orsrefresh",
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "PASSWORD_RESET_USE_SITES_DOMAIN": True,
    "PASSWORD_RESET_SERIALIZER": "core.api.serializers.CustomPasswordResetSerializer",
    "USER_DETAILS_SERIALIZER": "core.api.serializers.CustomUserDetailsSerializer",
}
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False

CELERY_BROKER_URL = "amqp://rabbitmq:5672"
CELERY_RESULT_BACKEND = "redis://redis:6379"

if DEBUG:
    SECRET_KEY = "secret"
    ALLOWED_HOSTS.extend(["localhost", "127.0.0.1"])

ENABLE_DEBUG_BAR = DEBUG and env.get_value("ENABLE_DEBUG_BAR", default=False, cast=bool)
if ENABLE_DEBUG_BAR:
    try:

        def show_toolbar(request):
            return DEBUG and (
                request.META.get("REMOTE_ADDR") in INTERNAL_IPS
                or request.META.get("HTTP_X_REAL_IP") in INTERNAL_IPS
            )

        try:
            hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
        except socket.gaierror:
            ips = []
        INTERNAL_IPS = ["127.0.0.1"]
        INTERNAL_IPS += [".".join(ip.split(".")[:-1] + ["1"]) for ip in ips]
        MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
        INSTALLED_APPS += ["debug_toolbar"]
        DEBUG_TOOLBAR_CONFIG = {
            "SHOW_COLLAPSED": True,
            "SHOW_TOOLBAR_CALLBACK": f"{__name__}.show_toolbar",
        }
    except ImportError:
        pass
